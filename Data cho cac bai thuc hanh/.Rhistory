q()
q()
setwd("F:/Lap_trinh_R/TH_XSTK/Data cho cac bai thuc hanh")
volume <- read.csv("volume.csv", header=TRUE)
attach(volume)
var.equal <- var.test(machine1, machine2)
var.equal # => phuong sai khac nhau
test <- t.test(machine1, machine2, var.equal=FALSE)
t.test(machine1, machine2, var.equal=FALSE)
test <- t.test(machine1, machine2, var.equal=FALSE)
p_value <- test$p.value
p_value
ktc <- test$conf.int
ktc
test.leq.oneside <- function(x, y, mu_0, sigma_1, sigma_2, alpha){
n <- length(x)
m <- length(y)
mean_X <- mean(x)
mean_Y <- mean(y)
Z <- (mean_X - mean_Y - mu_0)/sqrt(sigma_1^2/n+sigma_2^2/m)  # Biet sigma_1 va sigma_2
p_value <- pnorm(Z)
if(p_value < alpha)
print("Bac bo H0")
else
print("Chua du co so bac bo H0")
p_value
}
test.leq.oneside(machine1,machine2,0,0.002,0.0025,0.05)
test.leq.oneside <- function(x, y, mu_0, sigma_1, sigma_2, alpha){
n <- length(x)
m <- length(y)
mean_X <- mean(x)
mean_Y <- mean(y)
Z <- (mean_X - mean_Y - mu_0)/sqrt(sigma_1^2/n+sigma_2^2/m)  # Biet sigma_1 va sigma_2
p_value <- pnorm(Z)
if(p_value < alpha)
print("Bac bo H0")
else
print("Chua du co so bac bo H0")
printf("p_value = ",p_value)
}
test.leq.oneside(machine1,machine2,0,0.002,0.0025,0.05)
test.leq.oneside <- function(x, y, mu_0, sigma_1, sigma_2, alpha){
n <- length(x)
m <- length(y)
mean_X <- mean(x)
mean_Y <- mean(y)
Z <- (mean_X - mean_Y - mu_0)/sqrt(sigma_1^2/n+sigma_2^2/m)  # Biet sigma_1 va sigma_2
p_value <- pnorm(Z)
if(p_value < alpha)
print("Bac bo H0")
else
print("Chua du co so bac bo H0")
print("p_value = ",p_value)
}
test.leq.oneside(machine1,machine2,0,0.002,0.0025,0.05)
test.leq.oneside <- function(x, y, mu_0, sigma_1, sigma_2, alpha){
n <- length(x)
m <- length(y)
mean_X <- mean(x)
mean_Y <- mean(y)
Z <- (mean_X - mean_Y - mu_0)/sqrt(sigma_1^2/n+sigma_2^2/m)  # Biet sigma_1 va sigma_2
p_value <- pnorm(Z)
if(p_value < alpha)
print("Bac bo H0")
else
print("Chua du co so bac bo H0")
cat("p_value = ",p_value)
}
test.leq.oneside(machine1,machine2,0,0.002,0.0025,0.05)
test.geq.oneside <- function(x, y, mu_0, sigma_1, sigma_2, alpha){
n <- length(x)
m <- length(y)
mean_X <- mean(x)
mean_Y <- mean(y)
# Biet sigma_1 va sigma_2, thong ke Z~N(0,1)
Z <- (mean_X - mean_Y - mu_0)/ sqrt(sigma_1^2/n + sigma_2^2/m)
p_value <- 1 - pnorm(Z)
if(p_value < alpha)
print("Bac bo H0")
else
print("Chua du co so bac bo H0")
cat("p_value = ", p_value)
}
test.geq.oneside(machine1,machine2,0,0.002,0.0025,0.05)
diameter <- read.csv("diameter.csv", header=TRUE)
names(diameter)
attach(diameter)
test <- t.test(X_1, Y_1, var.equal = TRUE, conf.level = 0.95)
X <- diameter$extru.ma.1
Y <- diameter$extru.ma.2
# loai bo NA
X_1 <- X[is.na(X)!=TRUE]
Y_1 <- Y[is.na(Y)!=TRUE]
alpha <- 0.05
test <- t.test(X_1, Y_1, var.equal = TRUE, conf.level = 0.95)
test
X_1
Y_1
dim(X_1)
dim(X_2)
X_1 <- X[is.na(X)!=TRUE]
Y_1 <- Y[is.na(Y)!=TRUE]
dim(X_1)
dim(Y_2)
dim(X_1)
dim(Y_1)
length(X_1)
length(Y_1)
2.2e-16
2.2e-3
test <- t.test(X_1, Y_1, var.equal = TRUE, conf.level = 0.95)
test
p_value <- test$p.value
p_value
test$conf.int
print("Uoc luong su sai biet ve duong kinh trung binh cua cac thanh thep do hai may san xuat: ")
test$conf.int
cat("Uoc luong su sai biet ve duong kinh trung binh cua cac thanh thep do hai may san xuat: ",test$conf.int)
test.leq.oneside <- function(x,y,mu_0,alpha){
n <- length(x)
m <- length(y)
mu_X <- mean(x)
mu_Y <- mean(y)
S_p <- ((n-1)*sd(x)^2+(m-1)*sd(y)^2)/(n+m-2)
T0 <- (mu_X - mu_Y - mu_0)/S_p*(sqrt(1/n+1/m))
p_value <- pt(t0, n+m-2)
if(p_value < alpha)
print("Bac bo H0")
else
print("Chua du co so bac bo H0")
cat("p_value = ", p_value)
}
test.leq.oneside <- function(x,y,mu_0,alpha){
n <- length(x)
m <- length(y)
mu_X <- mean(x)
mu_Y <- mean(y)
S_p <- ((n-1)*sd(x)^2+(m-1)*sd(y)^2)/(n+m-2)
T0 <- (mu_X - mu_Y - mu_0)/S_p*(sqrt(1/n+1/m))
p_value <- pt(t0, n+m-2)
if(p_value < alpha)
print("Bac bo H0")
else
print("Chua du co so bac bo H0")
cat("p_value = ", p_value)
}
test.leq.oneside(X_1,Y_1,0,0.05)
test.leq.oneside <- function(x,y,mu_0,alpha){
n <- length(x)
m <- length(y)
mu_X <- mean(x)
mu_Y <- mean(y)
S_p <- ((n-1)*sd(x)^2+(m-1)*sd(y)^2)/(n+m-2)
T0 <- (mu_X - mu_Y - mu_0)/S_p*(sqrt(1/n+1/m))
p_value <- pt(T0, n+m-2)
if(p_value < alpha)
print("Bac bo H0")
else
print("Chua du co so bac bo H0")
cat("p_value = ", p_value)
}
test.leq.oneside(X_1,Y_1,0,0.05)
test.geq.oneside <- function(x,y,mu_0,alpha){
n <- length(x)
m <- length(y)
mu_X <- mean(x)
mu_Y <- mean(y)
S_p <- ((n-1)*sd(x)^2+(m-1)*sd(y)^2)/(n+m-2)
T0 <- (mu_X - mu_Y - mu_0)/S_p*(sqrt(1/n+1/m))
p_value <- 1-pt(T0, n+m-2)
if(p_value < alpha)
print("Bac bo H0")
else
print("Chua du co so bac bo H0")
cat("p_value = ", p_value)
}
test.geq.oneside(X_1,Y_1,0,0.05)
test.leq.oneside <- function(x,y,mu_0,alpha){
n <- length(x)
m <- length(y)
mu_X <- mean(x)
mu_Y <- mean(y)
S_p <- sqrt(((n-1)*sd(x)^2+(m-1)*sd(y)^2)/(n+m-2))
T0 <- (mu_X - mu_Y - mu_0)/S_p*(sqrt(1/n+1/m))
p_value <- pt(T0, n+m-2)
if(p_value < alpha)
print("Bac bo H0")
else
print("Chua du co so bac bo H0")
cat("p_value = ", p_value)
}
test.leq.oneside(X_1,Y_1,0,0.05)
test.leq.oneside = function(x, y, mu0, alpha){
#Tinh co mau cua hai mau
n1 = length(x[is.na(x) != TRUE])
n2 = length(x[is.na(x) != TRUE])
#Tinh trung binh mau cua hai mau
x.mu = mean(x); y.mu = mean(y)
#Tinh phuong sai mau cua hai mau
x.sd = sd(x); y.sd = sd(y)
#Tinh Sp
Sp2 = ((n1 - 1)*(x.sd^2) + (n2 - 1)*(y.sd^2))/(n1 + n2 - 2)
Sp = sqrt(Sp2)
#Tinh gia tri cua tieu chuan kiem dinh
t = ((x.mu - y.mu) - mu0)/(Sp*sqrt(1/n1 + 1/n2))
#Tinh p.value
p.value = pt(t, n1 + n2 - 2)
#Ket luan
kl = ifelse(p.value < alpha, 'Bac bo H0', 'Chua du co so de bac bo H0')
result = list(kl, p.value)
}
test.leq.oneside(X_1,Y_1,0,0.05)
result
test.leq.oneside <- function(x,y,mu_0,alpha){
n <- length(x)
m <- length(y)
mu_X <- mean(x)
mu_Y <- mean(y)
S_p <- sqrt(((n-1)*sd(x)^2+(m-1)*sd(y)^2)/(n+m-2))
T0 <- (mu_X - mu_Y - mu_0)/(S_p*sqrt(1/n+1/m))
p_value <- pt(T0, n+m-2)
if(p_value < alpha)
print("Bac bo H0")
else
print("Chua du co so bac bo H0")
cat("p_value = ", p_value)
}
test.leq.oneside(X_1,Y_1,0,0.05)
test.geq.oneside <- function(x,y,mu_0,alpha){
n <- length(x)
m <- length(y)
mu_X <- mean(x)
mu_Y <- mean(y)
S_p <- sqrt(((n-1)*sd(x)^2+(m-1)*sd(y)^2)/(n+m-2))
T0 <- (mu_X - mu_Y - mu_0)/(S_p*sqrt(1/n+1/m))
p_value <- 1-pt(T0, n+m-2)
if(p_value < alpha)
print("Bac bo H0")
else
print("Chua du co so bac bo H0")
cat("p_value = ", p_value)
}
test.geq.oneside(X_1,Y_1,0,0.05)
cholesterol <- read.csv("cholesterol.csv")
cholesterol
cholesterol <- read.csv("cholesterol.csv", header = TRUE)
getwd()
cholesterol <- read.csv("cholesterol.txt", header = TRUE)
cholesterol
names(cholesterol)
cholesterol <- read.csv("cholesterol.txt",sep=" ", header = TRUE)
cholesterol
names(cholesterol)
attach(cholesterol)
data <- Before-After
data
mu_D <- mean(Before)-mean(After)
mu_D
mean(data)
t.test(Before,After, paired=TRUE, var.equal = TRUE, data=data)
if(test$p.value < alpha)
print("bac bo H0")
else{
print("Khong du co so bac bo H0")
}
test$p.value
if(test$p.value < alpha)
print("bac bo H0")
else{
print("Khong du co so bac bo H0")
}
test$p.value
if(test$p.value < alpha){
print("bac bo H0")
}else{
print("Khong du co so bac bo H0")
}
test$p.value
if(test$p.value < alpha){
print("bac bo H0")
test$p.value
}else{
print("Khong du co so bac bo H0")
test$p.value
}
